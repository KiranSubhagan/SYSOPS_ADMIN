------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Simple Storage Service
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Objects are stored in Buckets. Bucket name must be globally unique.
Buckets are created at a region level.
Objects have a key. Key is the full path to the object. [ Prefix+Objectname]
Object values are the content of the body.

MaxSize - > Maximum object size is 5 Terabytes
If the file to be uploaded is more than 5 gigabytes, then we should use "Multi-Part-Upload".
For example if we want to upload 5 TB file. We need to upload it as 1000 5GB files.

VersionId - > Objects will have a version ID if versioning is enabled.

Tags - >
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Features of S3:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>> Versioning
>>cross-Region- Replication[Requires Policies which allows KMS Api calls] / Same-Region-Replication
>>Encryption ---->> SSE-S3, SSE-KMS , SSE-C    |   In transit ---> HTTPS(Integrated with AWS ACM)
>>Static Website Hosting ---->> URL ---> [http://my-bucket-name.s3-website.aws-region.amazonaws.com  or https://my-bucket-name.s3-website-aws-region.amazonaws.com]
>>Bucket Policies
>>Access Control Lists
>>Object Ownership
>>Lifecycle Rules
>>Event Notifications

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lifecycle Rules:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Moving objects between different storage classes can be automated using lifecycle rules.
Rules can be created for a certain prefix or certain object tags.
>>Transition Actions
>>Expiration Actions
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Note: Bucket policies will not stop the Lifecycle expiration  action from deleting an object in a Bucket.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
How to monitor the changes made by Lifecycle rules:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>> S3 Event Notifications.
>> S3 Server Access logs.
>> S3 Storage lens dashboard.

When setting an Expiration action on a bucket with versioning enabled, We need to  add an additional lifecycle configuration to delete the previous versions of the objects, expired delete markers, and incomplete multipart uploads.

--------------------
Amazon S3 Analytics
--------------------
 --->> Helps in decidign when to transition objects to the right class. Only for standard and standard IA.
S3 Analytics produce a .csv file which consist of Object Age and the current storage class. After 24-48 hours the S3 analytics will start to make analysis on the which storage class is optimal.

-----------------------
S3 Event Notifications
-----------------------

Event notifications can be sent to SQS SNS or Lambda. For these we need to add a resource access policy to each of theseservices
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Sample SQS policy:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
==========================================================================================================================================================================================
{
  "Version": "2012-10-17",
  "Id": "__default_policy_ID",
  "Statement": [
    {
      "Sid": "__owner_statement",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::941377118076:root"
      },
      "Action": "SQS:*",
      "Resource": "arn:aws:sqs:eu-west-1:941377118076:MyDemoQueue"
    },
    {
      "Sid": "AllowEveryone",
      "Effect": "Allow",
      "Principal": "*",
      "Action": "sqs:SendMessage",
      "Resource": "arn:aws:sqs:eu-west-1:941377118076:MyDemoQueue",
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:s3:::mybuk9t"
        }
      }
    }
  ]
}
==========================================================================================================================================================================================
