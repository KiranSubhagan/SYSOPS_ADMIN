------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Simple Storage Service
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Objects are stored in Buckets. Bucket name must be globally unique.
Buckets are created at a region level.
Objects have a key. Key is the full path to the object. [ Prefix+Objectname]
Object values are the content of the body.

MaxSize - > Maximum object size is 5 Terabytes
If the file to be uploaded is more than 5 gigabytes, then we should use "Multi-Part-Upload".
For example if we want to upload 5 TB file. We need to upload it as 1000 5GB files.

VersionId - > Objects will have a version ID if versioning is enabled.

Tags - >
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Features of S3:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>> Versioning
>>cross-Region- Replication[Requires Policies which allows KMS Api calls] / Same-Region-Replication
>>Encryption ---->> SSE-S3, SSE-KMS , SSE-C    |   In transit ---> HTTPS(Integrated with AWS ACM)
>>Static Website Hosting ---->> URL ---> [http://my-bucket-name.s3-website.aws-region.amazonaws.com  or https://my-bucket-name.s3-website-aws-region.amazonaws.com]
>>Bucket Policies
>>Access Control Lists
>>Object Ownership
>>Lifecycle Rules
>>Event Notifications

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lifecycle Rules:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Moving objects between different storage classes can be automated using lifecycle rules.
Rules can be created for a certain prefix or certain object tags.
>>Transition Actions
>>Expiration Actions
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Note: Bucket policies will not stop the Lifecycle expiration  action from deleting an object in a Bucket.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
How to monitor the changes made by Lifecycle rules:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>> S3 Event Notifications.
>> S3 Server Access logs.
>> S3 Storage lens dashboard.

When setting an Expiration action on a bucket with versioning enabled, We need to  add an additional lifecycle configuration to delete the previous versions of the objects, expired delete markers, and incomplete multipart uploads.

--------------------
Amazon S3 Analytics
--------------------
 --->> Helps in decidign when to transition objects to the right class. Only for standard and standard IA.
S3 Analytics produce a .csv file which consist of Object Age and the current storage class. After 24-48 hours the S3 analytics will start to make analysis on the which storage class is optimal.

-----------------------
S3 Event Notifications
-----------------------

Event notifications can be sent to SQS SNS or Lambda. For these we need to add a resource access policy to each of theseservices
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Sample SQS policy:
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
==========================================================================================================================================================================================
{
  "Version": "2012-10-17",
  "Id": "__default_policy_ID",
  "Statement": [
    {
      "Sid": "__owner_statement",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::941377118076:root"
      },
      "Action": "SQS:*",
      "Resource": "arn:aws:sqs:eu-west-1:941377118076:MyDemoQueue"
    },
    {
      "Sid": "AllowEveryone",
      "Effect": "Allow",
      "Principal": "*",
      "Action": "sqs:SendMessage",
      "Resource": "arn:aws:sqs:eu-west-1:941377118076:MyDemoQueue",
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:s3:::mybuk9t"
        }
      }
    }
  ]
}
=========================================================================================================================================================================================


-------------------
**S3 Perfomance:
--------------------

=========================
Multipart Uploads:
=========================

Recommended for files above 100MB and is a must for files above 5GB.The file will be uploaded as chunks which increases the upload speed.

===========================
S3 Transfer Acceleration:
===========================
Increases the upload and download speed by routing the traffic to nearest edge locations.
Example -----> India →  Mumbai Edge Location →  AWS private backbone network → S3 in North Virginia
The data transfer charge will be higher than normal routing.

============================
S3 Byte-Range Fetches
============================

Used to speed up Downloads by splitting them into different chunks.

Sample AWS Cli command to get the first 100 bytes:
aws s3api get-object \
  --bucket my-bucket \
  --key largefile.log \
  --range bytes=0-99 \
  part1.txt

Like this we can split a file into different chunks and download it.

===========================
S3 Batch Operations:
===========================

Perform bulk operations on existing objects in a bucket.

A batch Job consist of :
>The list of objects
>The Action to perform
>Optional Parameters


###############################################
S3 Glacier:

Storage class designed specifically for archival and long term data backups.
Cannot move objects to a Vault manually. Need to be done via glacier specific API's. Via CLI or SDK.

########################################################


S3 Multipart uploads:

using CLI:>>

First create a file with 100MB inside the current path.
#########################################################
>>dd if=/dev/zero of=100MB.txt bs=1MB count=100

Then split the file into 3 parts:>>
####################################

>>split -b 35m 100MB.txt 100MB_PART_


Then initiate the multipart upload and copy the upload ID :>>
############################################################
>>aws s3api create-multipart-uploads --bucket $Bucket_name --key 100MB.txt 


Then upload each part one by one:>>
#####################################
>>aws s3api upload-parts --bucket $Bucket_name --key 100MB.txt --body $File_name --part number --upload-id *********


After all parts are uploaded, Combine it using complete-multipart-upload:
##########################################################################

>>aws s3api complete-multipart-upload --bucket &Bucket_name --key 100MB.txt --upload-id ************  --multipart-upload "the json file with Etags of each parts"

#############################
Amazon Athena :
#############################

Athena is a serverless interactive query service that lets us query and retrieve data in S3.
Athena can be used to query on other storage services as well using whats called as Data Source Connectors. ---> FEDERATED QUERIES

Both relational and non relational data. ---> On AWS as well as On-Premises.


DataSource -->Catalog ----> Group of Databases
Database --> Schema ------> Group of tables
Tables ----> Group of Rows and Columns


#######################################
S3 Encryption
#######################################

Server Side Encryption -S3 Managed
-----------------------------------

Encryption Type --> AES-256
Header --> x-amz-server-side-encrytpion : AES256

Server side Encryption - KMS
-----------------------------


Uses KMS keys which we created to encrypt data in S3.

Header --> x-amz-server-side-encryption : AWS:KMS

Server Side encryption Customer managed key -(Can only be done from CLI or SDK)
--------------------------------------------

S3 doesn't store the key used to encrypt the data.
Instead the key is sent along with the data and s3 uses the key to encrypt the data.
HTTPS must be used in this case.

Client side encryption
------------------------

The customer uses their own encryption algorithm to encrypt the data and sends it to S3 to store it.
The Data in transit will be encrypted in this case.

HIPAA


S3 Encryption in Transit
------------------------

2 EndPoints : --> HTTP and HTTPS Endpoint


How to force an encryption in transit? --> Apply a Bucket policy which restricts any getobject action when the request is via HTTP.

######################################
CORS --> Cross Orgin Resources Sharing
######################################

Orgin = Scheme+domain+port

####################
S3 MFA Delete
####################


#################
S3 Access Logs
##################


##################
S3 PReSigned URL
##################

#####################
S3 Glacier Vault Lock
#####################
WORM


Vault lock policy once created . It cannot be deleted.


###########################
S3 Object Lock
###########################
WORM
Block an object version deletion for a specified amount of time.

Retention Mode :----|
                     

1. Compliance mode --> Object Versions cannot be overwritten or deleted by anu user including the root user. Retention modes and period cannot be changed.
2. Governance : ----->Admin or root user has some rights.
3. Legal Hold: ---> Infnite and cannnot be disabled or deleted.


#############################
S3 Access Points
#############################

Bucket Policy:
_______________

######################################################################################################################
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "DenyDirectAccess",
            "Effect": "Deny",
            "Principal": "*",
            "Action": "s3:*",
            "Resource": [
                "arn:aws:s3:::mfa-delte-demo-akshaya",
                "arn:aws:s3:::mfa-delte-demo-akshaya/*"
            ],
            "Condition": {
                "StringNotEquals": {
                    "s3:DataAccessPointArn": "arn:aws:s3:us-east-1:941377118076:accesspoint/demo-access-point"
                },
                "ArnNotEquals": {
                    "aws:PrincipalArn": "arn:aws:iam::941377118076:root"
                }
            }
        }
    ]
}
################################################################################################################
Access Point Policy :
_______________________
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": [
                    "arn:aws:iam::941377118076:root",
                    "arn:aws:iam::941377118076:user/KIRAN"
                ]
            },
            "Action": [
                "s3:GetObject",
                "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:us-east-1:941377118076:accesspoint/demo-access-point/object/*"
        }
    ]
}
########################################################################################################################################


#############################
S3 Multi-Region Access- point
##############################

Provides a global endpoint that spans s3 buckets in multiple region.

Routes requests to the nearest s3 bucket

Bidirectional s3 bucket replication rules are created to keep data in sync across regions

Failover controls.


##############################
S3 VPC Endpoint
##############################
















